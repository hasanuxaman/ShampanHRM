@model SymViewModel.HRM.EmployeeInfoVM
@using UIHelper.MVC
<style>
    input[type='text'], input[type='password'], textarea {
        margin: 0px!important;
    }
</style>
@using (Html.BeginForm("Create", "EmployeeOtherEarning", FormMethod.Post, new { @Id = "afrmEmployeeEdit" }))
{   
    <div class="row">
        <div class="col-md-4">
            <div class="thinbox">
                <div class="th_thinbox">
                    <p>@Model.EmpName</p>
                </div>
                <div class="row">
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.FiscalYearDetailId)
                    @Html.HiddenFor(model => model.EmployeeOtherEarningVM.EarningTypeId, new { @class = " form-control " })
                    <div class="editor-label col-md-4 ">
                        <label><b>Code</b> </label>
                    </div>
                    <div class="editor-field col-md-8">
                        @Html.TextBoxFor(model => model.Code, new { @placeholder = "Employee Code", @class = "  form-control", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.Code)
                    </div>
                    <div class="editor-label col-md-4">
                        @Html.LabelFor(model => model.JoinDate)
                    </div>
                    <div class="editor-field col-md-8">
                        @Html.TextBoxFor(model => model.JoinDate, new { @placeholder = "Employee Join Date", @class = "  form-control", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.JoinDate)
                    </div>
                    <div class="editor-label col-md-4">
                        @Html.LabelFor(model => model.Designation)
                    </div>
                    <div class="editor-field col-md-8">
                        @Html.TextBoxFor(model => model.Designation, new { @placeholder = "Employee Designation", @class = "  form-control", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.Designation)
                    </div>
                    <div class="editor-label col-md-4">
                        <label>@Session["DepartmentLabel"]</label>
                    </div>
                    <div class="editor-field col-md-8">
                        @Html.TextBoxFor(model => model.Department, new { @placeholder = "Employee Department", @class = "  form-control", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.Department)
                    </div>
                    <div class="editor-label col-md-4">
                        <label>@Session["SectionLabel"]</label>
                    </div>
                    <div class="editor-field col-md-8">
                        @Html.TextBoxFor(model => model.Section, new { @placeholder = "Employee Section", @class = "  form-control", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.Section)
                    </div>
                    <div class="editor-label col-md-4">
                        <label>@Session["ProjectLabel"]</label>
                    </div>
                    <div class="editor-field col-md-8">
                        @Html.TextBoxFor(model => model.Project, new { @placeholder = "Employee Project", @class = "  form-control", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.Project)
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="thinbox">

                <div class="row" id="ot">
                    <div class="col-md-3">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.EmployeeOtherEarningVM.OTHrs)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.EmployeeOtherEarningVM.OTHrs, new { @class = "OTHrs  form-control" })
                            @Html.ValidationMessageFor(model => model.EmployeeOtherEarningVM.OTHrs)
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.EmployeeOtherEarningVM.OTHrsSpecial)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.EmployeeOtherEarningVM.OTHrsSpecial, new { @class = "OTHrsSpecial  form-control" })
                            @Html.ValidationMessageFor(model => model.EmployeeOtherEarningVM.OTHrsSpecial)
                        </div>
                    </div>

                    @*<div class="col-md-3">
                        <div class="editor-label">
                            <label>Year</label>
                        </div>
                        <div class="editor-field">
                            <div>@Html.TextBox("fYear", @Session["SessionYear"].ToString(), new { @class = "fiscalyearCom form-control" }) </div>
                        </div>
                    </div>*@

                </div>

                <div class="row">
                    <div class="col-md-3">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.EmployeeOtherEarningVM.EarningAmount)
                            @*@Html.HiddenFor(model => model.EmployeeOtherEarningVM.FiscalYearDetailId)*@
                            @Html.HiddenFor(model => model.EmployeeOtherEarningVM.EmployeeId, new { @class = "emplearningid" })
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.EmployeeOtherEarningVM.EarningAmount, new { @class = "EarningAmount NumberCheck required  form-control" })
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.EmployeeOtherEarningVM.Remarks)
                        </div>
                        <div class="editor-field">
                            @Html.TextAreaFor(model => model.EmployeeOtherEarningVM.Remarks, new { @class = "  form-control" })
                            @Html.ValidationMessageFor(model => model.EmployeeOtherEarningVM.Remarks)
                        </div>
                    </div>
                </div>
                <br />
                <div class="headrow">
                    <button type="button" title="Save Data" id="SaveJSON" class=" Save sym-btn-save">&nbsp;Save</button>
                    <button type="button" title="Save Data" id="UpdateJSON" class=" Save sym-btn-update">Update</button>
                    <button type="button" title="Delete Data" id="DeleteJSON" class=" Save sym-btn-remove">&nbsp;Delete</button>
                </div>
            </div>
        </div>
    </div>
}
<script>
    var OTAmount = function () {

        var FiscalYearDetailId = $('.ccFiscalYearDetailId').val();
        var emplearningid = $('.emplearningid').val();

        if (FiscalYearDetailId == "") {
            ShowResult('Fail', "Please Select Fiscal year");
            return;
        }
        
        var OTHrs = '0';
        var OTHrsSpecial = '0';
        OTHrs = $(".OTHrs").val();
        OTHrsSpecial = $(".OTHrsSpecial").val();
        var Code = $('#Code').val();
        if (OTHrs.split('.')[1] > 59) {
            ShowResult("Fail", "Normal OT Minutes Cannot Be greater than .59!");
            $(".OTHrs").val(0);
            return;
        }
        if (OTHrsSpecial.split('.')[1] > 59) {
            ShowResult("Fail", "Special OT Minutes Cannot Be greater than .59!");
            $(".OTHrsSpecial").val(0);
            return;
        }
        $(".EarningAmount").val("0");
        if (OTHrs != '0' || OTHrsSpecial != '0') {
            var url = '/Payroll/EmployeeOtherEarning/OvertimeAmount?OTHrs=' + OTHrs + '&OTHrsSpecial=' + OTHrsSpecial + '&Code=' + Code + '&PayrollPeriodId=' + FiscalYearDetailId + '&EmployeeId=' + emplearningid;
            $.ajax({
                url: url,
                dataType: "json",
                type: 'GET',
                success: function (data) {
                    $(".EarningAmount").val(data.split('~')[0]);
                }
            });
        }
    }
    $(".OTHrs").change(function () {
        OTAmount();
    });

    $(".ccFiscalYearDetailId").change(function () {
        
        OTAmount();
    });

    $(".OTHrsSpecial").change(function () {
        OTAmount();
    });

    $(function () {
        InitDropDowns();
        checkvalue();

        //var empid = $('.empId').val();

        //empid = empid.split("~")[0];
        if ('@Model.Code' == null || '@Model.Code' == "") {
            $('#empId').val("");
        }
        else {
            $('#empId').val('@Model.Code~@Model.EmpName');
        }

        //$('.empId').val($('#Code').val());
       @* $('.selectDropdown').select2('data', { id: '@Model.Code', a_key: '@Model.Code' });*@
        $('.selectDropdown').val('@Model.Code').change();
    });
    $('#DeleteJSON').click(function () {
        var myData = $('#afrmEmployeeEdit').serialize();
        var url = "/Payroll/EmployeeOtherEarning/Create?btn=delete";
        submit(url, myData);
        $('.EarningAmount').val('0');
    });
    $(function () {
        valiDation("afrmEmployeeEdit");
    });
    function checkvalue() {
        var EarningAmount = $(".EarningAmount").val();
        if (EarningAmount == 0) {
            $("#SaveJSON").show();
            $("#UpdateJSON").hide();
        }
        else {
            $("#SaveJSON").hide();
            $("#UpdateJSON").show();
        }
    }
    $('#SaveJSON,#UpdateJSON').click(function () {
        var FiscalYearDetailId = $('#FiscalYearDetailId').val();

        if (FiscalYearDetailId == "") {
            ShowResult('Fail', "Please Select Fiscal year");
            return;
        }
       

        var url = "/Common/FiscalYear/FiscalPeriodLockCheck?FiscalYearDetailId=" + FiscalYearDetailId;

        $.ajax({
            url: url
               , type: 'Post'
               , traditional: true
               , beforeSend: function () { $(".loading").show(); }
               , success: SaveUpdateData
            , complete: function () { $(".loading").fadeOut(200).hide("slow") }
        });


    });

    function SaveUpdateData(result) {
        var results = result.split("~");
        if (results[0].toLowerCase() == 'true') {

            ShowResult("Fail", results[1]);

        }

        else {

            var EarningTypeId = $('.eType').val();
            var Code = $('#Code').val();
            if (Code == "") {
                ShowResult("Fail", "Please Select Code!");
                return;
            }
            if (EarningTypeId == "") {
                ShowResult("Fail", "Please Select Earning Type!");
                return;
            }
            if (FiscalYearDetailId == "") {
                ShowResult("Fail", "Please Select Fiscal Year!");
                return;
            }

            var ccFiscalYearDetailId = $('.ccFiscalYearDetailId').val();

            if (ccFiscalYearDetailId == "") {
                ShowResult('Fail', "Please Select Salary Month");
                return;
            }
            var myData = $('#afrmEmployeeEdit').serialize();
            //var url = "/Payroll/EmployeeOtherEarning/Create";
            myData += "&salaryMonth=" + ccFiscalYearDetailId;

            console.log(myData);

            var url = "/Payroll/EmployeeOtherEarning/Create?btn=save";
            submit(url, myData);


        }

    }

</script>


