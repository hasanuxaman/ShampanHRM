@model SymViewModel.Common.UserLogsVM
@using UIHelper.MVC

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Login Form</title>

    <style>
    </style>

</head>
<body>
    <div class="content">
        <div class="row">
            <div id="login" class="col-md-4 col-sm-12 col-xs-12">
                <div class="login">
                    <div style="color: white;" class="">
                        <img src="~/assets/Images/Shampanlogo.png" width="310" />
                    </div>
                    @using (Html.BeginForm("Login", "Home", new { ReturnUrl = ViewBag.ReturnUrl }))
                    {
                        @Html.HiddenFor(model => model.ReturnUrl)
                        @Html.LabelFor(model => model.LogID, new { @class = "" })
                        @Html.TextBoxFor(model => model.LogID, new { placeholder = "User Name", required = "required", @class = "form-control" })
                        @Html.LabelFor(model => model.Password, new { @class = "" })
                        @Html.PasswordFor(model => model.Password, new { placeholder = "Password", required = "required", @class = "form-control" })
                        <label>&nbsp;</label>
                        @Html.TextBoxFor(model => model.SessionDate, new { @class = "required customDatePicker form-control" })
                         @Html.HiddenFor(model => model.ComputerIPAddress, new { @id = "ip1", @class = "ipAdd required form-control" })
                       <button type="submit" class="btn btn-primary btn-block btn-large">Let me in.</button>
                    }
                </div>
            </div>
        </div>
    </div>
    <span id="ip"></span>
</body>
<script>
    var realIp = "";
    $('.logme').click(function () {
        var myurl = '@HttpContext.Current.Request.RawUrl';
    })
    $(".loading").hide();
    var localIp = "";

    function realipFind() {
      
        $.ajax({
            url: "http://ipinfo.io",
            dataType: 'jsonp',
            complete: function () {
                $(".loading").fadeOut(200).hide("slow")
                getipdetail();
            },
            success: function (data) {
                realIp = data.ip;
            },
        });
    }
    realipFind();
    function getipdetail() {
        getUserIP(function (ip) {
            var FullIp = "";
            var localIp = ip;
            FullIp = realIp + "~" + localIp
            $('.ipAdd').val(FullIp);
        });
    }
    function getUserIP(onNewIP) { //  onNewIp - your listener function for new IPs
        //compatibility for firefox and chrome
        var myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
        var pc = new myPeerConnection({
            iceServers: []
        }),
        noop = function () { },
        localIPs = {},
        ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g,
        key;

        function iterateIP(ip) {
            if (!localIPs[ip]) onNewIP(ip);
            localIPs[ip] = true;
        }

        //create a bogus data channel
        pc.createDataChannel("");

        // create offer and set local description
        pc.createOffer(function (sdp) {
            sdp.sdp.split('\n').forEach(function (line) {
                if (line.indexOf('candidate') < 0) return;
                line.match(ipRegex).forEach(iterateIP);
            });

            pc.setLocalDescription(sdp, noop, noop);
        }, noop);

        //listen for candidate events
        pc.onicecandidate = function (ice) {
            if (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return;
            ice.candidate.candidate.match(ipRegex).forEach(iterateIP);
        };
    }
</script>
