@{
    ViewBag.Title = "Index";
}
@model SymViewModel.Common.UserLogsVM
@using UIHelper.MVC
 <div class="row logins" style="margin:auto">
            <div  class="col-xs-12">
                <div class="login">
                    <div style="color: white;" class="">
                        <img src="~/assets/Images/Shampanlogo.png" width="310" />
                    </div>
                    @using (Html.BeginForm("Login", "Home", new { ReturnUrl = ViewBag.ReturnUrl }))
                    {
                        @Html.HiddenFor(model => model.ReturnUrl)
                        @Html.LabelFor(model => model.LogID, new { @class = "" })
                        @Html.TextBoxFor(model => model.LogID, new { placeholder = "User Name", required = "required", @class = "form-control" })
                        @Html.LabelFor(model => model.Password, new { @class = "" })
                        @Html.PasswordFor(model => model.Password, new { placeholder = "Password", required = "required", @class = "form-control" })
                        <label>&nbsp;</label>
                        @Html.TextBoxFor(model => model.SessionDate, new { @class = "required customDatePicker form-control" })
                         @Html.SimpleDropDownFor(model => model.BranchId, "/Config/DropDown/BranchName", new { @placeholder = "", required = "required", @class = " form-control " })
                         @Html.HiddenFor(model => model.ComputerIPAddress, new { @id = "ip1", @class = "ipAdd required form-control" })
                         @Html.HiddenFor(model => model.Location, new { @id = "Location", @class = "Location required form-control" })
                       <label>&nbsp;</label>
                         <button type="submit" class="btn btn-primary btn-block btn-large">Let me in.</button>
                        <p class="onLocation" style="color:red;text-align:center">Please On Your Location Option</p>
                    }
                </div>
            </div>
    </div>
    <span id="ip"></span>
    <span id="location"></span>
<style>
.logins {
    width: 100%;
    height: 100%;
    padding-top:40px;
    padding-bottom:110px;
    font-family: 'Open Sans', sans-serif;
    background: #092756;
    background: -moz-radial-gradient(0% 100%, ellipse cover, rgba(104,128,138,.4) 10%,rgba(138,114,76,0) 40%),-moz-linear-gradient(top, rgba(57,173,219,.25) 0%, rgba(42,60,87,.4) 100%), -moz-linear-gradient(-45deg, #670d10 0%, #092756 100%);
    background: -webkit-radial-gradient(0% 100%, ellipse cover, rgba(104,128,138,.4) 10%,rgba(138,114,76,0) 40%), -webkit-linear-gradient(top, rgba(57,173,219,.25) 0%,rgba(42,60,87,.4) 100%), -webkit-linear-gradient(-45deg, #670d10 0%,#092756 100%);
    background: -o-radial-gradient(0% 100%, ellipse cover, rgba(104,128,138,.4) 10%,rgba(138,114,76,0) 40%), -o-linear-gradient(top, rgba(57,173,219,.25) 0%,rgba(42,60,87,.4) 100%), -o-linear-gradient(-45deg, #670d10 0%,#092756 100%);
    background: -ms-radial-gradient(0% 100%, ellipse cover, rgba(104,128,138,.4) 10%,rgba(138,114,76,0) 40%), -ms-linear-gradient(top, rgba(57,173,219,.25) 0%,rgba(42,60,87,.4) 100%), -ms-linear-gradient(-45deg, #670d10 0%,#092756 100%);
    background: -webkit-radial-gradient(0% 100%, ellipse cover, rgba(104,128,138,.4) 10%,rgba(138,114,76,0) 40%), linear-gradient(to bottom, rgba(57,173,219,.25) 0%,rgba(42,60,87,.4) 100%), linear-gradient(135deg, #670d10 0%,#092756 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3E1D6D', endColorstr='#092756',GradientType=1 );
}
</style>
<script>
    var realIp = "";
    $('.logme').click(function () {
        var myurl = '@HttpContext.Current.Request.RawUrl';
    })
    $(".loading").hide();
    var localIp = "";

    function realipFind() {
        $.ajax({
            url: "http://ipinfo.io",
            dataType: 'jsonp',
            //beforeSend: function () { $(".loading").show(); },
            complete: function () {
                $(".loading").fadeOut(200).hide("slow")
                getipdetail();
            },
            success: function (data) {
                realIp = data.ip;
            },
        });
    }
    realipFind();
    function getipdetail() {
        getUserIP(function (ip) {
            var FullIp = "";
            var localIp = ip;
            FullIp = realIp + "~" + localIp
            $('.ipAdd').val(FullIp);
        });
    }
    function getUserIP(onNewIP) { //  onNewIp - your listener function for new IPs
        //compatibility for firefox and chrome
        var myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
        var pc = new myPeerConnection({
            iceServers: []
        }),
        noop = function () { },
        localIPs = {},
        ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g,
        key;
        function iterateIP(ip) {
            if (!localIPs[ip]) onNewIP(ip);
            localIPs[ip] = true;
        }
        //create a bogus data channel
        pc.createDataChannel("");

        // create offer and set local description
        pc.createOffer(function (sdp) {
            sdp.sdp.split('\n').forEach(function (line) {
                if (line.indexOf('candidate') < 0) return;
                line.match(ipRegex).forEach(iterateIP);
            });
            pc.setLocalDescription(sdp, noop, noop);
        }, noop);
        //listen for candidate events
        pc.onicecandidate = function (ice) {
            if (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return;
            ice.candidate.candidate.match(ipRegex).forEach(iterateIP);
        };
    }
    $(':input[type="submit"]').prop('disabled', true);
    getLocation()
    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition);
        } else {
          alert("Geolocation is not supported by this browser.");
        }
    }
    function showPosition(position) {
        if (position != null) {
            $('#Location').val(position.coords.latitude + ',' + position.coords.longitude);
            $(':input[type="submit"]').prop('disabled', false);
            $('.onLocation').hide();
        }
    }
</script>
